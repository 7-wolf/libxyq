#include "sSki.h"


bool sSki::setData(eSkill e)
{
	const auto& skis = txtSkill::getInstance()->getTables();
	const auto& icons = txtIcon::getInstance()->getTables().at(eIcon::技能j);
	const auto& it = skis.find(e);
	const auto& it2 = icons.find((int)e);
	// 被动技能不在skis里
	if (it == skis.end() && it2 == icons.end())
	{
		_icon = nullptr;
		_data = nullptr;
		return false;
	}
	_e = e;
	_data = it == skis.end() ? nullptr : &it->second;
	_icon = it2 == icons.end() ?  nullptr : &it2->second;
	_targetsMax = txtSkill::getTargetsCount(e);
	return true;
}

bool sSki::toDescs(sDescs& descs) const
{
	descs.clear();
	if (!isValid())
	{
		return false;
	}
	descs.name = _icon->name;
	descs.uhead = _icon->big;

	sDesc d;
	d.text = _icon->desc;
	d.color = s565::WHITE;
	descs.push(d);
	const auto& costs = txtSkill::getInstance()->getCosts();
	const auto& it = costs.find(_e);
	if (it != costs.end() && !it->second.desc.empty())
	{
		d.text = "消耗: " + it->second.desc;
		d.color = s565::YELLOW;
		descs.push(d);
	}
	return true;
}

bool sSki::isValid() const
{
	return (_icon != nullptr || _data != nullptr) && _e != eSkill::eSkiNone;
}

bool sSki::isEd()const
{
	return isValid() && txtSkill::isEd(_e);
}

bool sSki::isMenpai()const
{
	return isValid() && txtSkill::isMenpai(_e);
}

bool sSki::isF1()const
{
	return isValid() && txtSkill::isF1(_e);
}

bool sSki::isPet()const
{
	return isValid() && txtSkill::isPet(_e);
}

bool sSki::isSpecial()const
{
	return isValid() && txtSkill::isSpecial(_e);
}


struct sExpMoney { int exp, money; };
static const std::vector<sExpMoney>& getExpMoneys()
{
	static std::vector<sExpMoney> s_skillTable =
	{ { 1, 1 },
	{ 16, 6 },
	{ 32, 12 },
	{ 52, 19 },
	{ 75, 28 },
	{ 103, 38 },
	{ 136, 51 },
	{ 179, 67 },
	{ 231, 86 },
	{ 295, 110 },
	{ 372, 139 },
	{ 466, 174 },
	{ 578, 216 },
	{ 711, 266 },
	{ 867, 325 },
	{ 1049, 393 },
	{ 1260, 472 },
	{ 1503, 563 },
	{ 1780, 667 },
	{ 2096, 786 },
	{ 2452, 919 },
	{ 2854, 1070 },
	{ 3304, 1238 },
	{ 3807, 1426 },
	{ 4364, 1636 },
	{ 4983, 1868 },
	{ 5664, 2124 },
	{ 6415, 2404 },
	{ 7238, 2714 },
	{ 8138, 3050 },
	{ 9120, 3420 },
	{ 10188, 3820 },
	{ 11347, 4255 },
	{ 12602, 4725 },
	{ 13959, 5234 },
	{ 15423, 5783 },
	{ 16998, 6374 },
	{ 18692, 7009 },
	{ 20508, 7690 },
	{ 22452, 8419 },
	{ 24532, 9199 },
	{ 26753, 10032 },
	{ 29121, 10920 },
	{ 31642, 11865 },
	{ 34323, 12871 },
	{ 37169, 13938 },
	{ 40188, 15070 },
	{ 43388, 16270 },
	{ 46773, 17540 },
	{ 50352, 18882 },
	{ 54132, 20299 },
	{ 58120, 21795 },
	{ 62324, 23371 },
	{ 66750, 25031 },
	{ 71407, 26777 },
	{ 76303, 28613 },
	{ 81444, 30541 },
	{ 86840, 32565 },
	{ 92500, 34687 },
	{ 98430, 36911 },
	{ 104640, 39240 },
	{ 111136, 41676 },
	{ 117931, 44224 },
	{ 125031, 46886 },
	{ 132444, 49666 },
	{ 140183, 52568 },
	{ 148253, 55595 },
	{ 156666, 58749 },
	{ 165430, 62036 },
	{ 174556, 65458 },
	{ 184052, 69019 },
	{ 193930, 72723 },
	{ 204198, 76574 },
	{ 214868, 80575 },
	{ 225948, 84730 },
	{ 237449, 89043 },
	{ 249383, 93518 },
	{ 261760, 98160 },
	{ 274589, 102971 },
	{ 287884, 107956 },
	{ 301652, 113119 },
	{ 315908, 118465 },
	{ 330662, 123998 },
	{ 345924, 129721 },
	{ 361708, 135640 },
	{ 378023, 141758 },
	{ 394882, 148080 },
	{ 412297, 154611 },
	{ 430280, 161355 },
	{ 448844, 168316 },
	{ 468000, 175500 },
	{ 487760, 182910 },
	{ 508137, 190551 },
	{ 529145, 198429 },
	{ 550796, 206548 },
	{ 573103, 214913 },
	{ 596078, 223529 },
	{ 619735, 232400 },
	{ 644088, 241533 },
	{ 669149, 250931 },
	{ 694932, 260599 },
	{ 721452, 270544 },
	{ 748722, 280770 },
	{ 776755, 291283 },
	{ 805566, 302087 },
	{ 835169, 313188 },
	{ 865579, 324592 },
	{ 896809, 336303 },
	{ 928876, 348328 },
	{ 961792, 360672 },
	{ 995572, 373339 },
	{ 1030234, 386337 },
	{ 1065190, 399671 },
	{ 1102256, 413346 },
	{ 1139649, 427368 },
	{ 1177983, 441743 },
	{ 1217273, 456477 },
	{ 1256104, 471576 },
	{ 1298787, 487045 },
	{ 1341043, 502891 },
	{ 1384320, 519120 },
	{ 1428632, 535737 },
	{ 1473999, 552749 },
	{ 1520435, 570163 },
	{ 1567957, 587984 },
	{ 1616583, 606218 },
	{ 1666328, 624873 },
	{ 1717211, 643954 },
	{ 1769248, 663468 },
	{ 1822456, 683421 },
	{ 1876852, 703819 },
	{ 1932456, 724671 },
	{ 1989284, 745981 },
	{ 2047353, 767757 },
	{ 2106682, 790005 },
	{ 2167289, 812733 },
	{ 2229192, 835947 },
	{ 2292410, 859653 },
	{ 2356960, 883860 },
	{ 2422861, 908573 },
	{ 2490132, 933799 },
	{ 2558792, 959547 },
	{ 2628860, 985822 },
	{ 2700356, 1012633 },
	{ 2773296, 1039986 },
	{ 2847703, 1067888 },
	{ 2923593, 1096347 },
	{ 3000989, 1125371 },
	{ 3079908, 1154965 },
	{ 3160372, 1185139 },
	{ 3242400, 1215900 },
	{ 6652022, 2494508 },
	{ 6822452, 2558419 },
	{ 6996132, 2623549 },
	{ 7173104, 2689914 },
	{ 7353406, 2757527 },
	{ 11305620, 4239607 },
	{ 11586254, 4344845 },
	{ 11872072, 4452027 },
	{ 12163140, 4561177 },
	{ 12459518, 4672319 },
	{ 15033471, 450041 },
	{ 15315219, 4594563 },
	{ 15600468, 4680138 },
	{ 15889236, 4766769 },
	{ 16181550, 4854465 },
	{ 16477425, 4943226 },
	{ 16776885, 5033064 },
	{ 17079954, 5123985 },
	{ 17386650, 5215995 },
	{ 17697000, 5309100 },
	{ 24014692, 7204407 },
	{ 24438308, 7331490 },
	{ 24866880, 7460064 },
	{ 25300432, 7590129 },
	{ 25739000, 7721700 },
	{ 32728255, 9818475 },
	{ 33289095, 9986727 },
	{ 33856310, 10156893 },
	{ 34492930, 10328979 },
	{ 40842000, 12252600 },
	{ 60000000, 20000000 },
	{ 80000000, 40000000 },
	};
	return s_skillTable;
}


int sSki::getExp(int lv)
{
	return getExpMoneys().at(lv).exp;
}

int sSki::getMoney(int lv)
{
	return getExpMoneys().at(lv).money;
}
